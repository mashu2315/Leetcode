//128. Longest Consecutive Sequence
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        // Better approach
        // int lastSmaller = INT_MIN; int n = nums.size();
        // int cnt = 0; int longest=1;
        // if(n==0) return 0;
        // sort(nums.begin(),nums.end());
        // for(int i = 0;i<n;i++){
        //     if(nums[i]-1==lastSmaller){
        //         cnt +=1;
        //         lastSmaller = nums[i];
        //     } else if(nums[i]!=lastSmaller){
        //         cnt = 1;
        //         lastSmaller = nums[i];
        //     } longest = max(longest,cnt);
        // } 
        // return longest;
        //Optimal Approach:
        int n = nums.size();
        int longest = 0; int cnt = 0;
        unordered_set<int>st;
        for(int i=0;i<n;i++){
            st.insert(nums[i]);
        } 
        for(auto it :st){
            if(st.find(it-1)==st.end()){
                int cnt = 1;
                int x = it;
                while(st.find(x+1)!=st.end()){
                    cnt++ ;
                    x++;
                } longest = max(longest,cnt);
            }
        } return longest;
    } 
};
